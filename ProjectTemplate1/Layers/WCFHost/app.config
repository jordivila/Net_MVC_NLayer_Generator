<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <configSections>
    <section name="unity" type="Microsoft.Practices.Unity.Configuration.UnityConfigurationSection, Microsoft.Practices.Unity.Configuration" />
    <section name="loggingConfiguration" type="Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LoggingSettings, Microsoft.Practices.EnterpriseLibrary.Logging, Version=5.0.505.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" requirePermission="true" />
    <section name="dataConfiguration" type="Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseSettings, Microsoft.Practices.EnterpriseLibrary.Data, Version=5.0.505.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" requirePermission="true" />
    <section name="cachingConfiguration" type="Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerSettings, Microsoft.Practices.EnterpriseLibrary.Caching, Version=5.0.505.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" requirePermission="true" />
    <sectionGroup name="templateSettings">
      <section name="mailingSettings" type="$customNamespace$.Models.Configuration.ConfigSections.Mailing.MailingSettingsConfigSection, $customNamespace$.Models" />
      <section name="domainInfoSettings" type="$customNamespace$.Models.Configuration.ConfigSections.DomainInfo.DomainInfoSettingsConfigSection, $customNamespace$.Models" />
      <section name="unitySettings" type="$customNamespace$.Models.Configuration.ConfigSections.Unity.UnitySettingsConfigSection, $customNamespace$.Models" />
    </sectionGroup>
  </configSections>
  <templateSettings>
    <unitySettings>
      <!--<unityInfo currentContainer=""></unityInfo>-->
      <!--<unityInfo currentContainer="MockDAL"></unityInfo>-->
      <unityInfo currentContainer="MockDevelopment"></unityInfo>
    </unitySettings>
    <domainInfoSettings>
      <domainInfo domainName="CurlyCode.com" securityProtocol="https"></domainInfo>
    </domainInfoSettings>
    <mailingSettings>
      <mailAddresses supportTeamEmailAddress="support@template.com"></mailAddresses>
    </mailingSettings>
  </templateSettings>
  <startup>
    <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.0" />
  </startup>
  <dataConfiguration defaultDatabase="Membership Database String" />
  <connectionStrings>
    <add name="Membership Database String" connectionString="Server=IO_JV;Database=CurlyDevelopmentMembership;Integrated Security=SSPI;" providerName="System.Data.SqlClient" />
    <add name="Logging Database String" connectionString="Server=IO_JV;Database=CurlyDevelopmentLogging;Integrated Security=SSPI;" providerName="System.Data.SqlClient" />
  </connectionStrings>
  <cachingConfiguration defaultCacheManager="Cache Manager">
    <cacheManagers>
      <add name="Cache Manager" type="Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager, Microsoft.Practices.EnterpriseLibrary.Caching, Version=5.0.505.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" expirationPollFrequencyInSeconds="60" maximumElementsInCacheBeforeScavenging="1000" numberToRemoveWhenScavenging="10" backingStoreName="NullBackingStore" />
      <add name="CacheManagerForBaseModel" type="Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager, Microsoft.Practices.EnterpriseLibrary.Caching, Version=5.0.505.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" expirationPollFrequencyInSeconds="60" maximumElementsInCacheBeforeScavenging="1000" numberToRemoveWhenScavenging="10" backingStoreName="NullBackingStore" />
      <add name="CacheManagerForProfileDAL" type="Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager, Microsoft.Practices.EnterpriseLibrary.Caching, Version=5.0.505.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" expirationPollFrequencyInSeconds="60" maximumElementsInCacheBeforeScavenging="1000" numberToRemoveWhenScavenging="10" backingStoreName="NullBackingStore" />
      <add name="CacheManagerForRolesDAL" type="Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager, Microsoft.Practices.EnterpriseLibrary.Caching, Version=5.0.505.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" expirationPollFrequencyInSeconds="60" maximumElementsInCacheBeforeScavenging="1000" numberToRemoveWhenScavenging="10" backingStoreName="NullBackingStore" />
      <add name="CacheManagerForBlogFile" type="Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager, Microsoft.Practices.EnterpriseLibrary.Caching, Version=5.0.505.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" expirationPollFrequencyInSeconds="60" maximumElementsInCacheBeforeScavenging="1000" numberToRemoveWhenScavenging="10" backingStoreName="NullBackingStore" />
    </cacheManagers>
    <backingStores>
      <add name="Isolated Storage Cache Store" type="Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IsolatedStorageBackingStore, Microsoft.Practices.EnterpriseLibrary.Caching, Version=5.0.505.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" encryptionProviderName="" partitionName="Isolated Storage Cache Store Partition Name" />
      <add type="Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.NullBackingStore, Microsoft.Practices.EnterpriseLibrary.Caching, Version=5.0.505.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" name="NullBackingStore" />
    </backingStores>
  </cachingConfiguration>
  <unity xmlns="http://schemas.microsoft.com/practices/2010/unity">
    <!--Configuration-->
    <!-- Smtp -->
    <alias alias="ISmtpClient" type="$customNamespace$.Models.SmtpModels.ISmtpClient,$customNamespace$.Models" />
    <alias alias="SmtpClientProxy" type="$customNamespace$.Models.SmtpModels.SmtpClientProxy,$customNamespace$.Models" />
    <alias alias="SmtpClientMock" type="$customNamespace$.Models.SmtpModels.SmtpClientMock,$customNamespace$.Models" />
    <!--Membership -->
    <alias alias="IMembershipDAL" type="$customNamespace$.DAL.MembershipServices.IMembershipDAL,$customNamespace$.DAL" />
    <alias alias="MembershipDAL" type="$customNamespace$.DAL.MembershipServices.MembershipDAL,$customNamespace$.DAL" />
    <alias alias="MembershipDALMock" type="$customNamespace$.DAL.MembershipServices.MembershipDALMock,$customNamespace$.DAL" />
    <!--MembershipRoles -->
    <alias alias="IProfileDAL" type="$customNamespace$.DAL.MembershipServices.IProfileDAL,$customNamespace$.DAL" />
    <alias alias="ProfileDAL" type="$customNamespace$.DAL.MembershipServices.ProfileDAL,$customNamespace$.DAL" />
    <alias alias="ProfileDALMock" type="$customNamespace$.DAL.MembershipServices.ProfileDALMock,$customNamespace$.DAL" />
    <!-- Membership Profiles -->
    <alias alias="IRoleAdminDAL" type="$customNamespace$.DAL.MembershipServices.IRoleAdminDAL,$customNamespace$.DAL" />
    <alias alias="RoleAdminDAL" type="$customNamespace$.DAL.MembershipServices.RoleAdminDAL,$customNamespace$.DAL" />
    <alias alias="RoleAdminDALMock" type="$customNamespace$.DAL.MembershipServices.RoleAdminDALMock,$customNamespace$.DAL" />
    <!-- Logging -->
    <alias alias="ILoggingDAL" type="$customNamespace$.DAL.LoggingServices.ILoggingDAL,$customNamespace$.DAL" />
    <alias alias="LoggingDAL" type="$customNamespace$.DAL.LoggingServices.LoggingDAL,$customNamespace$.DAL" />
    <alias alias="LoggingDALMock" type="$customNamespace$.DAL.LoggingServices.LoggingDALMock,$customNamespace$.DAL" />
    <!-- Syndication -->
    <alias alias="ISyndicationDAL" type="$customNamespace$.DAL.SyndicationServices.ISyndicationDAL,$customNamespace$.DAL" />
    <alias alias="SyndicationDAL" type="$customNamespace$.DAL.SyndicationServices.SyndicationDAL,$customNamespace$.DAL" />
    <alias alias="SyndicationDALMock" type="$customNamespace$.DAL.SyndicationServices.SyndicationDAL,$customNamespace$.DAL" />
    <!--TokenPersistenceServices -->
    <alias alias="ITokenTemporaryPersistenceDAL" type="$customNamespace$.DAL.TokenTemporaryPersistenceServices.ITokenTemporaryPersistenceDAL,$customNamespace$.DAL" />
    <alias alias="TokenTemporaryPersistenceDAL" type="$customNamespace$.DAL.TokenTemporaryPersistenceServices.TokenTemporaryPersistenceDAL,$customNamespace$.DAL" />
    <alias alias="TokenTemporaryPersistenceDALMock" type="$customNamespace$.DAL.TokenTemporaryPersistenceServices.TokenTemporaryPersistenceDALMock,$customNamespace$.DAL" />
    <!-- User Request -->
    <!--NET.TCP BINDING Begin-->
    <alias alias="IUserRequestModel" type="$customNamespace$.Models.UserRequestModel.IUserRequestModel`2[                                                                                                                   [System.ServiceModel.OperationContext,                 System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],                                                                                                                 [System.ServiceModel.Channels.MessageHeaders, System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]                                                                                                          ], $customNamespace$.Models" />
    <alias alias="UserRequestModel" type="$customNamespace$.Models.UserRequestModel.UserRequestModelNetTcp,$customNamespace$.Models" />
    <!--NET.TCP BINDING End-->
    <!--Http BINDING Begin-->
    <!--<alias alias="IUserRequestModel"          type="$customNamespace$.Models.UserRequestModel.IUserRequestModel`2[  
                                                                                                                [System.ServiceModel.OperationContext,                 System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],
                                                                                                                [System.ServiceModel.Channels.MessageHeaders, System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]
                                                                                                         ], $customNamespace$.Models" />
    <alias alias="UserRequestModel"           type="$customNamespace$.Models.UserRequestModel.UserRequestModelHttpServer,$customNamespace$.Models" />-->
    <!--Http BINDING End-->
    <container>
      <register type="ISmtpClient" mapTo="SmtpClientMock" />
      <register type="IMembershipDAL" mapTo="MembershipDAL" />
      <register type="IRoleAdminDAL" mapTo="RoleAdminDAL" />
      <register type="IProfileDAL" mapTo="ProfileDAL" />
      <register type="ILoggingDAL" mapTo="LoggingDAL" />
      <register type="ISyndicationDAL" mapTo="SyndicationDAL" />
      <register type="ITokenTemporaryPersistenceDAL" mapTo="TokenTemporaryPersistenceDAL" />
      <register type="IUserRequestModel" mapTo="UserRequestModel" />
    </container>
    <container name="MockDevelopment">
      <register type="ISmtpClient" mapTo="SmtpClientMock" />
      <register type="IMembershipDAL" mapTo="MembershipDAL" />
      <register type="IRoleAdminDAL" mapTo="RoleAdminDAL" />
      <register type="IProfileDAL" mapTo="ProfileDAL" />
      <register type="ILoggingDAL" mapTo="LoggingDAL" />
      <register type="ISyndicationDAL" mapTo="SyndicationDAL" />
      <register type="ITokenTemporaryPersistenceDAL" mapTo="TokenTemporaryPersistenceDALMock" />
      <register type="IUserRequestModel" mapTo="UserRequestModel" />
    </container>
    <container name="MockDAL">
      <register type="ISmtpClient" mapTo="SmtpClientMock" />
      <register type="IMembershipDAL" mapTo="MembershipDALMock" />
      <register type="IRoleAdminDAL" mapTo="RoleAdminDALMock" />
      <register type="IProfileDAL" mapTo="ProfileDALMock" />
      <register type="ILoggingDAL" mapTo="LoggingDALMock" />
      <register type="ISyndicationDAL" mapTo="SyndicationDALMock" />
      <register type="ITokenTemporaryPersistenceDAL" mapTo="TokenTemporaryPersistenceDALMock" />
      <register type="IUserRequestModel" mapTo="UserRequestModel" />
    </container>
  </unity>
  <loggingConfiguration name="logWriterName" tracingEnabled="true" defaultCategory="General" logWarningsWhenNoCategoriesMatch="true">
    <listeners>
      <add name="Database Trace Listener" type="Microsoft.Practices.EnterpriseLibrary.Logging.Database.FormattedDatabaseTraceListener, Microsoft.Practices.EnterpriseLibrary.Logging.Database, Version=5.0.505.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" listenerDataType="Microsoft.Practices.EnterpriseLibrary.Logging.Database.Configuration.FormattedDatabaseTraceListenerData, Microsoft.Practices.EnterpriseLibrary.Logging.Database, Version=5.0.505.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" databaseInstanceName="Logging Database String" writeLogStoredProcName="WriteLog" addCategoryStoredProcName="AddCategory" formatter="Text Formatter Xml Output" />
    </listeners>
    <formatters>
      <add name="Text Formatter Xml Output" type="$customNamespace$.Models.Logging.RollingXmlTraceListenerFormatter, $customNamespace$.Models" template="&lt;LogMessageModel&gt;  &lt;Timestamp&gt;&lt;![CDATA[{timestamp(yyyy/MM/dd HH:mm:ss.fffffff)}]]&gt;&lt;/Timestamp&gt;  &lt;Message&gt;&lt;![CDATA[{message}]]&gt;&lt;/Message&gt;  &lt;Category&gt;&lt;![CDATA[{category}]]&gt;&lt;/Category&gt;  &lt;Priority&gt;&lt;![CDATA[{priority}]]&gt;&lt;/Priority&gt;  &lt;EventId&gt;&lt;![CDATA[{eventid}]]&gt;&lt;/EventId&gt;  &lt;Severity&gt;&lt;![CDATA[{severity}]]&gt;&lt;/Severity&gt;  &lt;Title&gt;&lt;![CDATA[{title}]]&gt;&lt;/Title&gt;  &lt;Machine&gt;&lt;![CDATA[{localMachine}]]&gt;&lt;/Machine&gt;  &lt;App_Domain&gt;&lt;![CDATA[{localAppDomain}]]&gt;&lt;/App_Domain&gt;  &lt;ProcessId&gt;&lt;![CDATA[{localProcessId}]]&gt;&lt;/ProcessId&gt;  &lt;Process_Name&gt;&lt;![CDATA[{localProcessName}]]&gt;&lt;/Process_Name&gt;  &lt;Thread_Name&gt;&lt;![CDATA[{threadName}]]&gt;&lt;/Thread_Name&gt;  &lt;Win32_ThreadId&gt;&lt;![CDATA[{win32ThreadId}]]&gt;&lt;/Win32_ThreadId&gt;&lt;FormattedMessage&gt;{dictionary(&lt;KeyValuePair&gt;&lt;Name&gt;&lt;![CDATA[{key}]]&gt;&lt;/Name&gt;&lt;Value&gt;&lt;![CDATA[{value}]]&gt;&lt;/Value&gt;&lt;/KeyValuePair&gt;)}&lt;/FormattedMessage&gt;&lt;/LogMessageModel&gt;" />
    </formatters>
    <categorySources>
      <!-- Begin UI Remote Logging -->
      <add switchValue="All" name="WCFGeneral">
        <listeners>
          <add name="Database Trace Listener" />
        </listeners>
      </add>
      <add switchValue="Off" name="WCFBeginRequest">
        <listeners>
          <add name="Database Trace Listener" />
        </listeners>
      </add>
      <add switchValue="Off" name="System.ServiceModel">
        <listeners>
          <add name="Database Trace Listener" />
        </listeners>
      </add>
      <!-- End UI Remote Logging -->
      <!-- Begin UI Remote Logging -->
      <add switchValue="All" name="UIGeneral">
        <listeners>
          <add name="Database Trace Listener" />
        </listeners>
      </add>
      <add switchValue="All" name="UIBeginRequest">
        <listeners>
          <add name="Database Trace Listener" />
        </listeners>
      </add>
      <add switchValue="All" name="UIServerSideUnhandledException">
        <listeners>
          <add name="Database Trace Listener" />
        </listeners>
      </add>
      <add switchValue="All" name="UIClientSideJavascriptError">
        <listeners>
          <add name="Database Trace Listener" />
        </listeners>
      </add>
      <!--End UI Remote Logging -->
    </categorySources>
    <specialSources>
      <allEvents switchValue="All" name="All Events" />
      <notProcessed switchValue="All" name="Unprocessed Category" />
      <errors switchValue="All" name="Logging Errors &amp; Warnings">
        <listeners>
          <add name="Database Trace Listener" />
        </listeners>
      </errors>
    </specialSources>
  </loggingConfiguration>
  <system.net>
    <mailSettings>
      <smtp>
        <!--<network host="smtp.gmail.com" port="465" userName="curlydevelopment@gmail.com" password="20061116JvT" defaultCredentials="false" enableSsl="true" />-->
        <!--<network host="SRVMAILI.arquia.org" userName="jv.io@arquia.org" password="20061116JvT" defaultCredentials="false"  />-->
      </smtp>
    </mailSettings>
  </system.net>
  <system.web>
    <compilation debug="true" targetFramework="4.0" />
    <anonymousIdentification enabled="false" />
    <authentication mode="Forms">
      <!--Do NOT remove sliding expiration -->
      <forms cookieless="UseCookies" name=".WCFAUTH" slidingExpiration="true" timeout="20"></forms>
    </authentication>
    <membership defaultProvider="AspNetSqlMembershipProvider" userIsOnlineTimeWindow="20">
      <providers>
        <clear />
        <add applicationName="/" connectionStringName="Membership Database String" enablePasswordReset="true" enablePasswordRetrieval="false" maxInvalidPasswordAttempts="5" minRequiredNonalphanumericCharacters="0" minRequiredPasswordLength="6" name="AspNetSqlMembershipProvider" passwordAttemptWindow="10" requiresQuestionAndAnswer="false" requiresUniqueEmail="true" type="System.Web.Security.SqlMembershipProvider" />
      </providers>
    </membership>
    <profile enabled="true" defaultProvider="AspNetSqlProfileProvider" automaticSaveEnabled="true">
      <properties>
        <add name="FirstName" type="System.String" allowAnonymous="false" serializeAs="String" />
        <add name="LastName" type="System.String" allowAnonymous="false" serializeAs="String" />
        <add name="BirthDate" type="System.Nullable`1[System.DateTime]" allowAnonymous="false" />
        <add name="Gender" type="System.String" allowAnonymous="false" />
        <add name="Culture" type="System.String" allowAnonymous="false" />
        <add name="Theme" type="System.String" allowAnonymous="false" />
      </properties>
      <providers>
        <clear />
        <add name="AspNetSqlProfileProvider" type="System.Web.Profile.SqlProfileProvider" connectionStringName="Membership Database String" applicationName="/"></add>
      </providers>
    </profile>
    <roleManager enabled="true" defaultProvider="AspNetSqlRoleProvider">
      <providers>
        <clear />
        <add name="AspNetSqlRoleProvider" type="System.Web.Security.SqlRoleProvider" connectionStringName="Membership Database String" applicationName="/" />
      </providers>
    </roleManager>
    <sessionState mode="StateServer" />
  </system.web>
  <system.serviceModel>
    <serviceHostingEnvironment aspNetCompatibilityEnabled="false"></serviceHostingEnvironment>
    <bindings>
      <netTcpBinding>
        <binding name="currentBinding" portSharingEnabled="false" maxReceivedMessageSize="2147483647">
          <readerQuotas maxStringContentLength="2147483647"></readerQuotas>
        </binding>
      </netTcpBinding>
      <basicHttpBinding>
        <!--<binding name="currentBinding" maxReceivedMessageSize="2147483647">
          <readerQuotas maxStringContentLength="2147483647"/>
        </binding>-->
      </basicHttpBinding>
    </bindings>
    <extensions>
      <behaviorExtensions>
        <add name="loggingServiceBehavior" type="$customNamespace$.WCF.ServicesLibrary.LoggingServiceBehaviorElement,$customNamespace$.WCF.ServicesLibrary" />
      </behaviorExtensions>
    </extensions>
    <behaviors>
      <serviceBehaviors>
        <behavior name="WCFHostService.MyServiceBehavior">
          <serviceMetadata httpGetEnabled="false" />
          <serviceDebug includeExceptionDetailInFaults="true" />
        </behavior>
      </serviceBehaviors>
    </behaviors>
    <services>
      <!-- NetTcpBinding Endpoints Begin-->
      <service behaviorConfiguration="WCFHostService.MyServiceBehavior" name="$customNamespace$.WCF.ServicesLibrary.AspNetApplicationServices.Admin.MembershipServices">
        <endpoint address="" binding="netTcpBinding" bindingConfiguration="currentBinding" contract="$customNamespace$.Models.Membership.IProviderMembership" />
        <host>
          <baseAddresses>
            <add baseAddress="net.tcp://localhost:8523/$customNamespace$.WCF.ServicesLibrary.AspNetApplicationServices/Admin/MembershipService/" />
          </baseAddresses>
        </host>
      </service>
      <service behaviorConfiguration="WCFHostService.MyServiceBehavior" name="$customNamespace$.WCF.ServicesLibrary.AspNetApplicationServices.AuthenticationService">
        <endpoint address="" binding="netTcpBinding" bindingConfiguration="currentBinding" contract="$customNamespace$.Models.Authentication.IProviderAuthentication" />
        <host>
          <baseAddresses>
            <add baseAddress="net.tcp://localhost:8524/$customNamespace$.WCF.ServicesLibrary.AspNetApplicationServices/AuthenticationService/" />
          </baseAddresses>
        </host>
      </service>
      <service behaviorConfiguration="WCFHostService.MyServiceBehavior" name="$customNamespace$.WCF.ServicesLibrary.AspNetApplicationServices.Admin.RoleServiceAdmin">
        <endpoint address="" binding="netTcpBinding" bindingConfiguration="currentBinding" contract="$customNamespace$.Models.Roles.IProviderRoleManager" />
        <host>
          <baseAddresses>
            <add baseAddress="net.tcp://localhost:8525/$customNamespace$.WCF.ServicesLibrary.AspNetApplicationServices/Admin/RoleServiceAdmin/" />
          </baseAddresses>
        </host>
      </service>
      <service behaviorConfiguration="WCFHostService.MyServiceBehavior" name="$customNamespace$.WCF.ServicesLibrary.AspNetApplicationServices.RoleService">
        <endpoint address="" binding="netTcpBinding" bindingConfiguration="currentBinding" contract="$customNamespace$.Models.Roles.IProviderRoles" />
        <host>
          <baseAddresses>
            <add baseAddress="net.tcp://localhost:8526/$customNamespace$.WCF.ServicesLibrary.AspNetApplicationServices/RoleService/" />
          </baseAddresses>
        </host>
      </service>
      <service behaviorConfiguration="WCFHostService.MyServiceBehavior" name="$customNamespace$.WCF.ServicesLibrary.AspNetApplicationServices.ProfileService">
        <endpoint address="" binding="netTcpBinding" bindingConfiguration="currentBinding" contract="$customNamespace$.Models.Profile.IProviderProfile" />
        <host>
          <baseAddresses>
            <add baseAddress="net.tcp://localhost:8527/$customNamespace$.WCF.ServicesLibrary.AspNetApplicationServices/ProfileService/" />
          </baseAddresses>
        </host>
      </service>
      <service behaviorConfiguration="WCFHostService.MyServiceBehavior" name="$customNamespace$.WCF.ServicesLibrary.LoggingServices.LoggingService">
        <endpoint address="" binding="netTcpBinding" bindingConfiguration="currentBinding" contract="$customNamespace$.Models.Logging.IProviderLogging" />
        <host>
          <baseAddresses>
            <add baseAddress="net.tcp://localhost:8528/$customNamespace$.WCF.ServicesLibrary.LoggingServices/LoggingService/" />
          </baseAddresses>
        </host>
      </service>
      <service behaviorConfiguration="WCFHostService.MyServiceBehavior" name="$customNamespace$.WCF.ServicesLibrary.SyndicationServices.SyndicationService">
        <endpoint address="" binding="netTcpBinding" bindingConfiguration="currentBinding" contract="$customNamespace$.Models.Syndication.IProviderSyndication" />
        <host>
          <baseAddresses>
            <add baseAddress="net.tcp://localhost:8529/$customNamespace$.WCF.ServicesLibrary.SyndicationServices/SyndicationService/" />
          </baseAddresses>
        </host>
      </service>
      <!--NetTcpBinding Endopints End-->

      <!-- BasicHttpBinding Endpoints Begin-->
      <!--
      <service behaviorConfiguration="WCFHostService.MyServiceBehavior" name="$customNamespace$.WCF.ServicesLibrary.AspNetApplicationServices.Admin.MembershipServices">
        <endpoint address="" binding="basicHttpBinding" bindingConfiguration="currentBinding"  contract="$customNamespace$.Models.ProxyContracts.IMembershipServices" />
        <host>
          <baseAddresses>
            <add baseAddress="http://localhost/$customNamespace$.WCF.ServiceHostHttp/AspNetApplicationServices/Admin/MembershipServices.svc/" />
          </baseAddresses>
        </host>
      </service>
      <service behaviorConfiguration="WCFHostService.MyServiceBehavior" name="$customNamespace$.WCF.ServicesLibrary.AspNetApplicationServices.AuthenticationService">
        <endpoint address="" binding="basicHttpBinding" bindingConfiguration="currentBinding"  contract="$customNamespace$.Models.ProxyContracts.IAuthenticationService" />
        <host>
          <baseAddresses>
            <add baseAddress="http://localhost/$customNamespace$.WCF.ServiceHostHttp/AspNetApplicationServices/AuthenticationService.svc/" />
          </baseAddresses>
        </host>
      </service>
      <service behaviorConfiguration="WCFHostService.MyServiceBehavior" name="$customNamespace$.WCF.ServicesLibrary.AspNetApplicationServices.Admin.RoleServiceAdmin">
        <endpoint address="" binding="basicHttpBinding" bindingConfiguration="currentBinding"  contract="$customNamespace$.Models.ProxyContracts.IRolesServiceAdmin" />
        <host>
          <baseAddresses>
            <add baseAddress="http://localhost/$customNamespace$.WCF.ServiceHostHttp/AspNetApplicationServices/Admin/RoleServiceAdmin.svc/" />
          </baseAddresses>
        </host>
      </service>
      <service behaviorConfiguration="WCFHostService.MyServiceBehavior" name="$customNamespace$.WCF.ServicesLibrary.AspNetApplicationServices.RoleService">
        <endpoint address="" binding="basicHttpBinding" bindingConfiguration="currentBinding"  contract="$customNamespace$.Models.ProxyContracts.IRoleService" />
        <host>
          <baseAddresses>
            <add baseAddress="http://localhost/$customNamespace$.WCF.ServiceHostHttp/AspNetApplicationServices/RoleService.svc/" />
          </baseAddresses>
        </host>
      </service>
      <service behaviorConfiguration="WCFHostService.MyServiceBehavior" name="$customNamespace$.WCF.ServicesLibrary.AspNetApplicationServices.ProfileService">
        <endpoint address="" binding="basicHttpBinding" bindingConfiguration="currentBinding"  contract="$customNamespace$.Models.ProxyContracts.IProfileService" />
        <host>
          <baseAddresses>
            <add baseAddress="http://localhost/$customNamespace$.WCF.ServiceHostHttp/AspNetApplicationServices/ProfileService.svc/" />
          </baseAddresses>
        </host>
      </service>
      <service behaviorConfiguration="WCFHostService.MyServiceBehavior" name="$customNamespace$.WCF.ServicesLibrary.LoggingServices.LoggingService">
        <endpoint address="" binding="basicHttpBinding" bindingConfiguration="currentBinding"  contract="$customNamespace$.Models.ProxyContracts.ILoggingService" />
        <host>
          <baseAddresses>
            <add baseAddress="http://localhost/$customNamespace$.WCF.ServiceHostHttp/LoggingServices/LoggingService.svc/" />
          </baseAddresses>
        </host>
      </service>
      <service behaviorConfiguration="WCFHostService.MyServiceBehavior" name="$customNamespace$.WCF.ServicesLibrary.SyndicationServices.SyndicationService">
        <endpoint address="" binding="basicHttpBinding" bindingConfiguration="currentBinding"  contract="$customNamespace$.Models.ProxyContracts.ISyndicationService" />
        <host>
          <baseAddresses>
            <add baseAddress="http://localhost/$customNamespace$.WCF.ServiceHostHttp/SyndicationServices/SyndicationService.svc/" />
          </baseAddresses>
        </host>
      </service>
      -->
      <!--BasicHttpBinding Endopints End-->
    </services>
  </system.serviceModel>
  <!--
  <system.diagnostics>
    <sources>
      <source name="System.ServiceModel"
              switchValue="Information, ActivityTracing"
              propagateActivity="true" >
        <listeners>
          <add name="xml"/>
        </listeners>
      </source>
      <source name="System.ServiceModel.MessageLogging">
        <listeners>
          <add name="xml"/>
        </listeners>
      </source>
      <source name="myUserTraceSource"
              switchValue="Information, ActivityTracing">
        <listeners>
          <add name="xml"/>
        </listeners>
      </source>
    </sources>
    <sharedListeners>
      <add name="xml"
           type="System.Diagnostics.XmlWriterTraceListener"
           initializeData="c:\ErrorTmp5.svclog" />
    </sharedListeners>
  </system.diagnostics>
  -->
  <!--
  <runtime>
    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
      <dependentAssembly>
        <assemblyIdentity name="Microsoft.Practices.Unity.Interception" publicKeyToken="31bf3856ad364e35" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-2.1.505.0" newVersion="2.1.505.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="Microsoft.Practices.Unity.Configuration" publicKeyToken="31bf3856ad364e35" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-2.0.414.0" newVersion="2.0.414.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="Microsoft.Practices.Unity" publicKeyToken="31bf3856ad364e35" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-2.0.414.0" newVersion="2.0.414.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="Microsoft.Practices.EnterpriseLibrary.Logging" publicKeyToken="31bf3856ad364e35" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-5.0.505.0" newVersion="5.0.505.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="Microsoft.Practices.EnterpriseLibrary.Common" publicKeyToken="31bf3856ad364e35" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-5.0.505.0" newVersion="5.0.505.0" />
      </dependentAssembly>
    </assemblyBinding>
  </runtime>
  -->
</configuration>