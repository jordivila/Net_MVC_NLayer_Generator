<#@ output extension=".result" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Web" #>

<#
// ********************************************************************/
// Some assemblies come from Project -> ReferencePaths 
// By doing this we avoid the need of using assembly's absolute path
// Another way of avoiding absolute paths is using GAC assemblies
// ********************************************************************/
#>
<#@ Assembly Name="$customNamespace$.Resources.dll" #>
<#@ Assembly Name="$customNamespace$.UI.Web.dll" #>
<#@ Assembly Name="$customNamespace$.Models.dll" #>
<#@ Assembly Name="WebGrease.dll" #>
<#
// ********************************************************************/
// ********************************************************************/
#>

<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ import namespace="System.Web.Hosting" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Web" #>

<#@ import namespace="Microsoft.Ajax.Utilities" #>

<#@ import namespace="$customNamespace$.UI.Web" #>
<#@ import namespace="$customNamespace$.UI.Web.Areas.UserProfile" #>
<#@ import namespace="$customNamespace$.UI.Web.Areas.UserAccount" #>
<#@ import namespace="$customNamespace$.UI.Web.Areas.Home" #>
<#@ import namespace="$customNamespace$.UI.Web.Areas.UserAdministration" #>
<#@ import namespace="$customNamespace$.UI.Web.Areas.Error" #>
<#@ import namespace="$customNamespace$.UI.Web.Common.Mvc.Html" #>
<#@ import namespace="$customNamespace$.Models.Enumerations" #>

<#@ include file="BaseInclude.tt" #>

// This file has been auto generated by T4 Text Templates
// Changes to this file may be overriden at compile time


<#+ 
	public void SaveOutput(string outputFolder, string outputFileName)
	{
		this.SaveOutput(outputFolder, outputFileName, false, MediaType.none);
    }

	public void SaveOutput(string outputFolder, string outputFileName, bool minified, MediaType media)
	{
		string templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
		string outputFolderPath = Path.Combine(templateDirectory, outputFolder);
		string outputFilePath = Path.Combine(outputFolderPath, outputFileName);
	
		if(!File.Exists(outputFilePath))
		{
			Directory.CreateDirectory(outputFolderPath);
		}

		try
		{
			if(minified)
            {
				Minifier m = new Minifier();
				CodeSettings c = new CodeSettings();

				if (media == MediaType.javascript)
				{
					File.WriteAllText(outputFilePath, m.MinifyJavaScript(this.GenerationEnvironment.ToString(), c), System.Text.Encoding.UTF8);
				}
				else
				{
					File.WriteAllText(outputFilePath, m.MinifyStyleSheet(this.GenerationEnvironment.ToString()), System.Text.Encoding.UTF8);
				}
            }
			else
            {
				File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString(), System.Text.Encoding.UTF8); 
			}
		}
		catch (Exception ex)
		{
			// En caso que un archivo este bloqueado --> seguimos adelante
			// Asi guardaremos solamente los archivos que estan en "Checked Out"
			this.Warning(ex.Message);
		}

		this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
    }
#>