<#@ template debug="false" hostspecific="true" language="C#"  #>
<#@ assembly name="System.Xml.dll" #>
<#@ assembly name="System.Core.dll" #>

<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.XPath" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>

<#
    try 
    {	        
		string targetName = Host.ResolveParameterValue(null, null, "targetName");


		DirectoryInfo projectDirInfo = new DirectoryInfo(Host.ResolvePath(string.Empty)).Parent;
		List<FileInfo> files = projectDirInfo.GetFiles("*.resx", SearchOption.AllDirectories).ToList();
		List<FileInfo> filesToTransform = new List<FileInfo>();
		List<string> directoriesChecked = new List<string>();

		foreach (var item in files)
		{
			// 1.- Check if current file parent directory has been already treated
			if(!directoriesChecked.Contains(item.DirectoryName))
			{
				// 2.- If NOT treated then add it to the list
				directoriesChecked.Add(item.DirectoryName);
				// 2.1.- Get File Name pattern for search -> Ex.: SomeResourceFileName.resx -> SomeResourceFileName
				string rootFileName = item.Name.Split(".".ToCharArray(), StringSplitOptions.RemoveEmptyEntries).First();
				// 2.1.- Get the shortest file name from the list of resx file names in the current directory
				FileInfo resxFileMainCulture = item.Directory.GetFiles(rootFileName + "*", SearchOption.TopDirectoryOnly).OrderBy(p=>p.Name.Length).First();
				// 2.2.- Add the main culture resx file to the list of files to transform
				filesToTransform.Add(resxFileMainCulture);
			}
		}

		//this.GenerationEnvironment.Clear();

		this.GenerationEnvironment.AppendLine("// This file was generated by build event calling 'ResourceBuildEventPre.cmd' which executes T4 template 'ResourceBuildEventPre.tt' ");
		this.GenerationEnvironment.AppendLine("using System;");
		this.GenerationEnvironment.AppendLine("using System.Collections.Generic;");
		this.GenerationEnvironment.AppendLine("using System.Linq;");
		this.GenerationEnvironment.AppendLine("using System.Text;");

		foreach (var item in filesToTransform)
		{
			this.GenerationEnvironment.AppendLine(string.Format("using {0}.{1};", targetName, item.Directory.Name));
		}
		this.GenerationEnvironment.AppendLine();
		this.GenerationEnvironment.AppendLine(string.Format("namespace {0}.Helpers.GeneratedResxClasses", targetName));
		this.GenerationEnvironment.AppendLine("{");
		foreach (var item in filesToTransform)
		{
			this.FileGenerateKeys(item);
			this.FileGenerateProperties(item);
		}
		this.GenerationEnvironment.AppendLine("}");

		this.SaveOutput(Path.Combine(projectDirInfo.FullName, "ResourceHelpers"), "ResourceHelperPre.cs");
    }
    catch (Exception ex)
    {
		this.Warning(ex.Message);
        //throw ex;
    }
#>

<#+ 
public void FileGenerateKeys(FileInfo info)
{
	var reader = XmlReader.Create(Host.ResolvePath(info.FullName));
	var document = new XPathDocument(reader);
	var navigator = document.CreateNavigator();
	var dataNav = navigator.Select("/root/data");

	this.PushIndent("\t");
	this.GenerationEnvironment.Append(this.CurrentIndent);
	this.GenerationEnvironment.AppendLine(string.Format("public class {0}Keys", info.Name.Replace(".resx", string.Empty)));
	this.GenerationEnvironment.Append(this.CurrentIndent);
	this.GenerationEnvironment.AppendLine("{");
	this.PushIndent("\t");
	foreach (XPathNavigator item in dataNav)
	{
		this.GenerationEnvironment.Append(this.CurrentIndent);
		var name = item.GetAttribute("name", String.Empty);
		this.GenerationEnvironment.AppendLine(string.Format("public const String {0} = \"{0}\";", name));
	}
	this.PopIndent();
	this.GenerationEnvironment.Append(this.CurrentIndent);
	this.GenerationEnvironment.AppendLine("}");
	this.PopIndent();
}

public void FileGenerateProperties(FileInfo info)
{
	var reader = XmlReader.Create(Host.ResolvePath(info.FullName));
	var document = new XPathDocument(reader);
	var navigator = document.CreateNavigator();
	var dataNav = navigator.Select("/root/data");
	var resxFileClassName = string.Format("{0}", info.Name.Replace(".resx", string.Empty));

	this.PushIndent("\t");
	this.GenerationEnvironment.Append(this.CurrentIndent);
	this.GenerationEnvironment.AppendLine(string.Format("public class {0}ViewModelHelper", resxFileClassName));
	this.GenerationEnvironment.Append(this.CurrentIndent);
	this.GenerationEnvironment.AppendLine("{");
	this.PushIndent("\t");
	foreach (XPathNavigator item in dataNav)
	{
		this.GenerationEnvironment.Append(this.CurrentIndent);
		var name = item.GetAttribute("name", String.Empty);
		this.GenerationEnvironment.AppendLine(string.Format("public  string {0} {{	get{{	return {1}.{0};	}}	}}", name, resxFileClassName));
	}
	this.PopIndent();
	this.GenerationEnvironment.Append(this.CurrentIndent);
	this.GenerationEnvironment.AppendLine("}");
	this.PopIndent();
}

public void SaveOutput(string outputFolder, string outputFileName)
{
	string templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
	string outputFolderPath = Path.Combine(templateDirectory, outputFolder);
	string outputFilePath = Path.Combine(outputFolderPath, outputFileName);
	
	if(!File.Exists(outputFilePath))
	{
		Directory.CreateDirectory(outputFolderPath);
	}

	try
	{
		File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString(), System.Text.Encoding.UTF8);
	}
	catch (Exception ex)
	{
		// En caso que un archivo este bloqueado --> seguimos adelante
		// Asi guardaremos solamente los archivos que estan en "Checked Out"
		this.Warning(ex.Message);
	}

	this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
}
#>
